/*
 * @Author: [Zhuohao Lee, Xiaoheng Xia]
 * @Date: 2022-04-20 17:01:06
 * @LastEditors: [Zhuohao Lee, Xiaoheng Xia]
 * @LastEditTime: 2022-04-24 21:02:17
 * @FilePath: /519021911248/Part C/519021911248-ncopy.ys
 * @Description: edith_lzh@sjtu.edu.cn | 519021911248 
 * 
 * 
 * Try to avoid Load and Use referred in pipeline design in CS:APP 2e, "load and use" or mrmovl then rmmovl will 
 * cause penalty, which must be avoided to improve the performance. On the one hand, we rearranged the order
 * of instructions to avoid stalling as much as possible. On the other hand, we use two registers to store the 
 * variable val, loading them separately and ahead of time.
 *
 * There's much overhead in testing and updating procedure of loops, and one way to minimize 
 * it is to perform a technique named "loop unrolling". That is, we do multiple
 * loops and update the relevant data at once, to reduce the number of times we execute
 * the add and jxx instructions.
 *
 * We did a 4 unrolling in this part, which can be found in LNpos1, LNpos2, LNpos3 and Loop
 *
 * To get a better fusion, we can modify benchmark source code and add more unrolling steps to avoid pipeline stalls
 *
 * Copyright (c) 2022 by Zhuohao Lee, All Rights Reserved. 
 */

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.

#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
	ncopy:	pushl %ebp	# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi	# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
# Loop Header
	xorl 	%eax , %eax  		# count = 0;
	iaddl 	$-4 , %edx			#len = len -4
	andl	%edx ,  %edx  		# len <= 0?
	jl 	remain
Loop:	mrmovl (%ebx) , %esi 	# read val from src...
	mrmovl 4(%ebx),%edi			# MOVE THE FIRST BYTE to reg
	rmmovl %esi , (%ecx) 		# ...and store it to dst
	andl 	%esi ,%esi 			# val <= 0?
	jle	LNpos1 					# if so, goto LNpos1:
	iaddl	$1 , %eax 			# count++ using iaddl
LNpos1: rmmovl %edi , 4(%ecx)	# MOVE THE FIRST BYTE to mem
	andl 	%edi , %edi
	jle  	LNpos2				# IF POSITIVE eax++
	iaddl	$1, %eax
LNpos2:mrmovl 8(%ebx) , %esi	# MOVE THE SECOND BYTE to reg
	mrmovl 12(%ebx),%edi		# MOVE THE THIRD BYTE to reg (AVOID HAZARD)
	rmmovl %esi ,8(%ecx)		# MOVE THE SECOND BYTE to mem
	andl 	%esi ,%esi
	jle	LNpos3					# IF POSITIVE eax++
	iaddl	$1 , %eax
LNpos3: rmmovl %edi , 12(%ecx)	# MOVE THE THIRD BYTE to mem
	andl 	%edi , %edi
	jle 	nextLoop			# IF POSITIVE eax++
	iaddl	$1, %eax
nextLoop:
	iaddl	$16,%ebx
	iaddl	$16,%ecx
	iaddl	$-4,%edx
	jge	Loop            

								# maybe just remain less than 3
								# Deal with the remaining in the old school way
remain:	 iaddl 	$4 , %edx		# Restore the true len
	iaddl	$-1, %edx
	jl	Done
	mrmovl (%ebx) , %esi
	mrmovl 4(%ebx),%edi
	rmmovl %esi , (%ecx)
	andl 	%esi ,%esi
	jle	rNpos
	iaddl	$1 , %eax
rNpos:	
	iaddl 	$-1, %edx
	jl 	Done
	rmmovl	%edi , 4(%ecx)
	andl 	%edi , %edi
	jle 	rNpos1
	iaddl	$1, %eax
rNpos1:
	iaddl 	$-1 , %edx	
	jl	Done
	mrmovl 8(%ebx) , %esi
	rmmovl %esi , 8(%ecx)
	andl 	%esi ,%esi
	jle	Done
	iaddl	$1 , %eax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
popl %edi               # Restore callee-save registers
popl %ebx
popl %esi
rrmovl %ebp, %esp
popl %ebp
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
